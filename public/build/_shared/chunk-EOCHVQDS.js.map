{
  "version": 3,
  "sources": ["../../../node_modules/suspend-react/dist/index.js", "../../../node_modules/@sanity/preview-kit/src/auth.ts", "../../../node_modules/@sanity/preview-kit/src/lazy.ts", "../../../node_modules/@sanity/preview-kit/src/definePreview.ts", "../../../node_modules/@sanity/preview-kit/src/PreviewSuspense.tsx", "../../../node_modules/@portabletext/toolkit/src/asserters.ts", "../../../node_modules/@portabletext/toolkit/src/sortMarksByOccurences.ts", "../../../node_modules/@portabletext/toolkit/src/buildMarksTree.ts", "../../../node_modules/@portabletext/toolkit/src/nestLists.ts", "../../../node_modules/@portabletext/toolkit/src/toPlainText.ts", "../../../node_modules/@portabletext/toolkit/src/spanToPlainText.ts", "../../../node_modules/@portabletext/toolkit/src/types.ts", "../../../node_modules/@portabletext/react/src/components/merge.ts", "../../../node_modules/@portabletext/react/src/components/marks.tsx", "../../../node_modules/@portabletext/react/src/components/list.tsx", "../../../node_modules/@portabletext/react/src/warnings.ts", "../../../node_modules/@portabletext/react/src/components/unknown.tsx", "../../../node_modules/@portabletext/react/src/components/defaults.tsx", "../../../node_modules/@portabletext/react/src/react-portable-text.tsx", "../../../app/components/SanityImage.tsx", "../../../app/components/SanityContent.tsx", "../../../app/components/ExitPreview.tsx", "../../../app/components/Product.tsx"],
  "sourcesContent": ["const globalCache = [];\n\nfunction shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nfunction query(fn, keys, preload = false, config = {}) {\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) return entry.response; // If the promise is still unresolved, throw\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    promise: // Execute the promise\n    fn(...keys) // When it resolves, store its value\n    .then(response => entry.response = response) // Remove the entry if a lifespan was given\n    .then(() => {\n      if (config.lifespan && config.lifespan > 0) {\n        setTimeout(() => {\n          const index = globalCache.indexOf(entry);\n          if (index !== -1) globalCache.splice(index, 1);\n        }, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n\n    if (entry) {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    }\n  }\n};\n\nexport { clear, peek, preload, suspend };\n", "/**\n * Checks if the current token, or cookies, result in a valid session\n * @internal\n */\nexport const _checkAuth = async (\n  projectId: string,\n  token: string | null\n): Promise<boolean> => {\n  const headers = token ? { Authorization: `Bearer ${token}` } : undefined\n  const res = await fetch(`https://${projectId}.api.sanity.io/v1/users/me`, {\n    credentials: 'include',\n    headers,\n  })\n  const json = await res.json()\n  return Boolean(json?.id)\n}\n", "import type { Config, GroqStore } from '@sanity/groq-store'\nimport type { EventSourcePolyfill as EventSourcePolyfillType } from 'event-source-polyfill'\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * Lazy loaded, heavy, libs. Most use cases want to wrap these in `suspend-react`:\n * ```tsx\n * import {suspend} from 'suspend-react'\n * import {_lazyGroqStore} from '@sanity/preview-kit'\n *\n * export default function PreviewComponent() {\n *   const groqStore = suspend(() => _lazyGroqStore(), ['@sanity/preview-kit', '@sanity/groq-store])\n * }\n * ```\n * This makes them load in any app that uses React 18 and have Suspense features enabled.\n * For Next 13 and React Server Components, they should be wrapped in `React.use` and `React.cache`, this is done for you by `next-sanity`:\n * ```tsx\n * import {cache, use} from 'react'\n * import {_lazyGroqStore} from '@sanity/preview-kit'\n *\n * const lazyGroqStore = cache(_lazyGroqStore)\n *\n * export default function PreviewComponent() {\n *   const groqStore = use(lazyGroqStore())\n * }\n * ```\n * @internal\n */\nexport const _lazyGroqStore = async () => {\n  const pkg = await import('@sanity/groq-store')\n  const { groqStore } = 'default' in pkg ? pkg.default : pkg\n  return groqStore as (config: Config) => GroqStore\n}\n\n/**\n * See the typings for `_lazyGroqStore` for detailed usage instructions.\n * @internal\n */\nexport const _lazyEventSourcePolyfill = async () => {\n  const pkg = await import('event-source-polyfill')\n  const { EventSourcePolyfill } = 'default' in pkg ? pkg.default : pkg\n  return EventSourcePolyfill as unknown as EventSourcePolyfillType\n}\n", "import type { Config, GroqStore } from '@sanity/groq-store'\nimport type { EventSourcePolyfill } from 'event-source-polyfill'\nimport { useEffect, useMemo, useState, useSyncExternalStore } from 'react'\nimport { suspend } from 'suspend-react'\n\nimport { _checkAuth } from './auth'\nimport { _lazyEventSourcePolyfill, _lazyGroqStore } from './lazy'\n\n/**\n * The params type used both in `@sanity/client`:\n * ```tsx\n * import {createClient} from '@sanity/client'\n *\n * const client = createClient()\n * await client.fetch(\n *   '*[_type == \"post\"]',\n *   params // <-- this is the type\n * )\n * ```\n * It's also used with the `usePreview` hook returned by `definePreview`:\n * ```tsx\n * import {definePreview} from '@sanity/preview-kit'\n * const usePreview = definePreview()\n * usePreview(\n *   token,\n *   '*[_type == \"post\"]',\n *   params // <-- this is the type\n * )\n * ```\n * @public\n */\nexport type Params = Record<string, unknown>\n\n/**\n * @internal\n */\nexport interface _PreviewConfig extends PreviewConfig {\n  /**\n   * Lazy load `@sanity/groq-store`.\n   */\n  importGroqStore: () => (config: Config) => GroqStore\n  /**\n   * Lazy load `event-source-polyfille`.\n   * This happens if `token` is specified.\n   */\n  importEventSourcePolyfill: () => EventSourcePolyfill\n  /**\n   * Suspend render until the dataset is done loading.\n   */\n  preload: <R = any, P extends Params = Params, Q extends string = string>(\n    store: GroqStore,\n    query: Q,\n    /**\n     * Must wrap in `useMemo` to avoid infinite loop\n     */\n    params?: P\n  ) => R\n  /**\n   * Only called if `onPublicAccessOnly` is defined. Render is suspended until this Promise resolves to a boolean.\n   */\n  checkAuth: (projectId: string, token: string | null) => boolean\n}\n\n/**\n * Return params that are stable with deep equal as long as the key order is the same\n * @internal\n */\nfunction useParams<P extends Params = Params>(params?: P): P {\n  const stringifiedParams = useMemo(\n    () => JSON.stringify(params || {}),\n    [params]\n  )\n  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams])\n}\n\n/**\n * @internal\n */\nexport const _definePreview = ({\n  projectId,\n  dataset,\n  documentLimit = 3000,\n  subscriptionThrottleMs = 10,\n  overlayDrafts = true,\n  importEventSourcePolyfill,\n  importGroqStore,\n  preload,\n  onPublicAccessOnly,\n  checkAuth,\n  includeTypes,\n}: _PreviewConfig): UsePreview => {\n  if (!projectId) {\n    console.warn(`No projectId set for createPreviewHook, returning dummy hook`)\n    // No projectId set, just return a dummy hook and warn\n    const usePreview: UsePreview = function usePreview() {\n      console.warn(\n        `The hook returned by createPreviewHook is a dummy as there is no projectId set, returning null`\n      )\n      return null\n    }\n    return usePreview\n  }\n\n  let store: ReturnType<typeof import('@sanity/groq-store').groqStore>\n  return function usePreview<\n    R = any,\n    P extends Params = Params,\n    Q extends string = string\n  >(\n    token: string | null,\n    query: Q,\n    _params?: P,\n    _serverSnapshot?: R\n  ): R | null {\n    if (typeof document === 'undefined') {\n      throw new Error(\n        `Calling usePreview outside a browser environment isn't supported. Ensure the component using the hook is only rendering on the client. For example by wrapping it in PreviewSuspense.`\n      )\n    }\n    if (!token && token !== null) {\n      throw new Error(\n        'No `token` given to usePreview hook, if this is intentional then set it to `null`'\n      )\n    }\n    const [serverSnapshot] = useState<R | undefined>(() => _serverSnapshot)\n\n    const params = useParams<P>(_params)\n\n    if (!store) {\n      if (onPublicAccessOnly) {\n        const hasAuth = checkAuth(projectId, token)\n        if (!hasAuth) {\n          onPublicAccessOnly()\n        }\n      }\n\n      // Lazy load `@sanity/groq-store` as it's quite a big chunk of JS`\n      const groqStore = importGroqStore()\n\n      store = groqStore({\n        projectId,\n        dataset,\n        documentLimit,\n        subscriptionThrottleMs,\n        includeTypes,\n        token: token === null ? undefined : token,\n        // Lazy load the huge `event-source-polyfill`, but only if a token is specified\n        EventSource: token === null ? undefined : importEventSourcePolyfill(),\n        listen: true,\n        overlayDrafts,\n      })\n    }\n\n    const initial = serverSnapshot ?? preload<R, P, Q>(store, query, params)\n    const syncStore = useMemo(() => {\n      // Make sure that React suspends the component until the groq store is finished loading the dataset and able to execute the query\n      let snapshot = initial\n\n      return {\n        getServerSnapshot:\n          serverSnapshot === undefined ? undefined : () => serverSnapshot,\n        getSnapshot: () => snapshot,\n        subscribe: (onStoreChange: () => void) => {\n          const subscription = store.subscribe(\n            query,\n            typeof params === 'undefined' ? {} : params,\n            (err, result) => {\n              if (err) {\n                console.error(\n                  'Error thrown in the usePreviewHook subscription',\n                  err\n                )\n                throw err\n              } else {\n                snapshot = result\n                onStoreChange()\n              }\n            }\n          )\n\n          return () => subscription.unsubscribe()\n        },\n      }\n    }, [initial, params, query, serverSnapshot])\n\n    useEffect(() => {\n      const callback = () => {\n        store.close()\n      }\n      window.addEventListener('beforeunload', callback)\n      return () => window.removeEventListener('beforeunload', callback)\n    }, [])\n\n    return useSyncExternalStore(\n      syncStore.subscribe,\n      syncStore.getSnapshot,\n      syncStore.getServerSnapshot\n    )\n  }\n}\n\n/**\n * @public\n */\nexport type UsePreview<R = any, P = Params, Q = string> = (\n  token: string | null,\n  query: Q,\n  params?: P,\n  /**\n   * Providing a serverSnapshot significantly speeds up hydration time and lets you opt-in to not show loading UI\n   */\n  serverSnapshot?: R\n) => R\n\n/**\n * @public\n */\nexport interface PreviewConfig\n  extends Pick<\n    Config,\n    'projectId' | 'dataset' | 'includeTypes' | 'overlayDrafts'\n  > {\n  /**\n   * The maximum number of documents, to prevent using too much memory unexpectedly\n   * Throws on the first operation (query, retrieval, subscription) if reaching this limit.\n   * @defaultValue 3000\n   */\n  documentLimit?: number\n  /**\n   * Throttle the event emits to batch updates. If you have a lot of editors changing content at the same time it might help to increase this value to reduce the amount of rerenders React have to perform.\n   * @defaultValue 10\n   */\n  subscriptionThrottleMs?: number\n  /**\n   * You want to throw an error in this function if it's considered a failure if draft documents can't be queried.\n   *\n   * Without a `token` then the dataset export will attempt to use reuse the user token by setting `credentials: \"include\" when calling fetch()`.\n   * This only works with the `cookie` auth model you find in Sanity Studio. It doesn't work in browsers that require `cookieless` to login, such as iOS Safari and more.\n   * Currently the only way to fix this is to define a `token` that has `viewer` rights in your project.\n   * It's not recommended to rely on auth at the moment as it limits the use of previews to Chromium based browsers and users that have a Sanity account in the project.\n   * If you still want to use the `cookie` auth model you'll want to throw an error if the user don't have a cookie based session established. If this method is undefined, the default, it'll only query published, public, documents.\n   * ```tsx\n   * import {definePreview} from '@sanity/preview-kit'\n   * const usePreview = definePreview({\n   *  onPublicAccessOnly: () => {\n   *   throw new Error('Not authenticated - preview not available')\n   * })\n   * ```\n   *\n   * If you're building a preview experience that doesn't query drafts then you can just leave this function undefined.\n   *\n   * Enabling this will slightly slow-down startup as it will wait with exporting the dataset until it has checked if you have a cookie session.\n   * This check is done by calling `https://${projectId}.api.sanity.io/v1/users/me` with fetch() and `credentials: \"include\"`.\n   * If `token` is set it'll set `headers: {Authorization: \"Bearer ${token}\"}` instead.\n   * But if you're already setting `token` you can skip defining this function to run startup faster, if the `token` is invalid it'll throw while exporting the dataset anyway.\n   */\n  onPublicAccessOnly?: () => void\n  /**\n   * @defaultValue true\n   */\n  overlayDrafts?: boolean\n}\n\n/**\n * @internal\n */\nexport const _preloadQuery = <R = any>(\n  store: GroqStore,\n  query: string,\n  params?: Params\n): Promise<R> =>\n  // eslint-disable-next-line no-warning-comments\n  // @todo: fix the casting to any here\n  store.query<R>(query, params)\n\n/**\n * @public\n */\nexport const definePreview = (config: PreviewConfig): UsePreview =>\n  _definePreview({\n    ...config,\n    importEventSourcePolyfill: () =>\n      suspend(\n        () => _lazyEventSourcePolyfill(),\n        ['@sanity/preview-kit', 'event-source-polyfill']\n      ),\n    importGroqStore: () =>\n      suspend(\n        () => _lazyGroqStore(),\n        ['@sanity/preview-kit', '@sanity/groq-store']\n      ),\n    preload: (store, query, params) =>\n      suspend(\n        () => _preloadQuery<any>(store, query, params),\n        ['@sanity/preview-kit', 'preload', query, JSON.stringify(params ?? {})]\n      ),\n    checkAuth: (projectId, token) =>\n      suspend(\n        () => _checkAuth(projectId, token),\n        ['@sanity/preview-kit', 'checkAuth', projectId, token]\n      ),\n  })\n", "import { type ReactNode, Suspense, useEffect, useReducer } from 'react'\n\n/** @public */\nexport type PreviewSuspenseProps = {\n  children: ReactNode\n  fallback: ReactNode\n}\n\n/**\n * Preview Mode really needs to only load as client-only, as it uses EventSource to stream data from Content Lake.\n * We don't want to run anything on the server but the fallback until it's loaded.\n * It's used in the same way as `React.Suspense`, it just also defers render until the component is mounted:\n * ```tsx\n * import {PreviewSuspense} from '@sanity/preview-kit'\n *\n * export default function App() {\n *   return (\n *     <PreviewSuspense fallback={<div>Loading preview...</div>}>\n *       <ComponentUsingPreviewHooks />\n *     </PreviewSuspense>\n *   )\n * }\n * ```\n * @public\n */\nexport function PreviewSuspense({ children, fallback }: PreviewSuspenseProps) {\n  const [mounted, mount] = useReducer(() => true, false)\n  useEffect(mount, [mount])\n\n  return (\n    <Suspense fallback={fallback}>{mounted ? children : fallback}</Suspense>\n  )\n}\n", "import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\nimport type {ToolkitNestedPortableTextSpan, ToolkitPortableTextList, ToolkitTextNode} from './types'\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text span.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text span, otherwise false\n */\nexport function isPortableTextSpan(\n  node: ArbitraryTypedObject | PortableTextSpan\n): node is PortableTextSpan {\n  return (\n    node._type === 'span' &&\n    'text' in node &&\n    typeof node.text === 'string' &&\n    (typeof node.marks === 'undefined' ||\n      (Array.isArray(node.marks) && node.marks.every((mark) => typeof mark === 'string')))\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text block.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text block, otherwise false\n */\nexport function isPortableTextBlock(\n  node: PortableTextBlock | TypedObject\n): node is PortableTextBlock {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === 'string' &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== '@' &&\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!('markDefs' in node) ||\n      (Array.isArray(node.markDefs) &&\n        // Every mark definition needs to have an `_key` to be mappable in child spans\n        node.markDefs.every((def) => typeof def._key === 'string'))) &&\n    // `children` is required and needs to be an array\n    'children' in node &&\n    Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child === 'object' && '_type' in child)\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted portable list item block.\n *\n * @param block - Block to check\n * @returns True if valid Portable Text list item block, otherwise false\n */\nexport function isPortableTextListItemBlock(\n  block: PortableTextBlock | TypedObject\n): block is PortableTextListItemBlock {\n  return (\n    isPortableTextBlock(block) &&\n    'listItem' in block &&\n    typeof block.listItem === 'string' &&\n    (typeof block.level === 'undefined' || typeof block.level === 'number')\n  )\n}\n\n/**\n * Loose check to determine if block is a toolkit list node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param block - Block to check\n * @returns True if toolkit list, otherwise false\n */\nexport function isPortableTextToolkitList(\n  block: TypedObject | ToolkitPortableTextList\n): block is ToolkitPortableTextList {\n  return block._type === '@list'\n}\n\n/**\n * Loose check to determine if span is a toolkit span node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param span - Span to check\n * @returns True if toolkit span, otherwise false\n */\nexport function isPortableTextToolkitSpan(\n  span: TypedObject | ToolkitNestedPortableTextSpan\n): span is ToolkitNestedPortableTextSpan {\n  return span._type === '@span'\n}\n\n/**\n * Loose check to determine if node is a toolkit text node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param node - Node to check\n * @returns True if toolkit text node, otherwise false\n */\nexport function isPortableTextToolkitTextNode(\n  node: TypedObject | ToolkitTextNode\n): node is ToolkitTextNode {\n  return node._type === '@text'\n}\n", "import type {PortableTextSpan, TypedObject} from '@portabletext/types'\nimport {isPortableTextSpan} from './asserters'\n\nconst knownDecorators = ['strong', 'em', 'code', 'underline', 'strike-through']\n\n/**\n * Figures out the optimal order of marks, in order to minimize the amount of\n * nesting/repeated elements in environments such as HTML. For instance, a naive\n * implementation might render something like:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded text</strong>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a> and some bolded text\n * </strong>\n * ```\n *\n * This is particularly necessary for cases like links, where you don't want multiple\n * individual links for different segments of the link text, even if parts of it are\n * bolded/italicized.\n *\n * This function is meant to be used like: `block.children.map(sortMarksByOccurences)`,\n * and is used internally in {@link buildMarksTree | `buildMarksTree()`}.\n *\n * The marks are sorted in the following order:\n *\n *  1. Marks that are shared amongst the most adjacent siblings\n *  2. Non-default marks (links, custom metadata)\n *  3. Decorators (bold, emphasis, code etc), in a predefined, preferred order\n *\n * @param span - The current span to sort\n * @param index - The index of the current span within the block\n * @param blockChildren - All children of the block being sorted\n * @returns Array of decorators and annotations, sorted by \"most adjacent siblings\"\n */\nexport function sortMarksByOccurences(\n  span: PortableTextSpan | TypedObject,\n  index: number,\n  blockChildren: (PortableTextSpan | TypedObject)[]\n): string[] {\n  if (!isPortableTextSpan(span) || !span.marks) {\n    return []\n  }\n\n  if (!span.marks.length) {\n    return []\n  }\n\n  // Slicing because we'll be sorting with `sort()`, which mutates\n  const marks = span.marks.slice()\n  const occurences: Record<string, number> = {}\n  marks.forEach((mark) => {\n    occurences[mark] = 1\n\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex]\n\n      if (\n        sibling &&\n        isPortableTextSpan(sibling) &&\n        Array.isArray(sibling.marks) &&\n        sibling.marks.indexOf(mark) !== -1\n      ) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n  })\n\n  return marks.sort((markA, markB) => sortMarks(occurences, markA, markB))\n}\n\nfunction sortMarks<U extends string, T extends Record<U, number>>(\n  occurences: T,\n  markA: U,\n  markB: U\n): number {\n  const aOccurences = occurences[markA]\n  const bOccurences = occurences[markB]\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aKnownPos = knownDecorators.indexOf(markA)\n  const bKnownPos = knownDecorators.indexOf(markB)\n\n  // Sort known decorators last\n  if (aKnownPos !== bKnownPos) {\n    return aKnownPos - bKnownPos\n  }\n\n  // Sort other marks simply by key\n  return markA.localeCompare(markB)\n}\n", "import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextMarkDefinition,\n} from '@portabletext/types'\nimport type {ToolkitNestedPortableTextSpan, ToolkitTextNode} from './types'\nimport {isPortableTextSpan} from './asserters'\nimport {sortMarksByOccurences} from './sortMarksByOccurences'\n\n/**\n * Takes a Portable Text block and returns a nested tree of nodes optimized for rendering\n * in HTML-like environments where you want marks/annotations to be nested inside of eachother.\n * For instance, a naive span-by-span rendering might yield:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded and </strong>\n * <em><strong>italicized text</strong></em>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a>\n *   and some bolded and <em>italicized text</em>\n * </strong>\n * ```\n *\n * Note that since \"native\" Portable Text spans cannot be nested,\n * this function returns an array of \"toolkit specific\" types:\n * {@link ToolkitTextNode | `@text`} and {@link ToolkitNestedPortableTextSpan | `@span` }.\n *\n * The toolkit-specific type can hold both types, as well as any arbitrary inline objects,\n * creating an actual tree.\n *\n * @param block - The Portable Text block to create a tree of nodes from\n * @returns Array of (potentially) nested spans, text nodes and/or arbitrary inline objects\n */\nexport function buildMarksTree<M extends PortableTextMarkDefinition = PortableTextMarkDefinition>(\n  block: PortableTextBlock<M>\n): (ToolkitNestedPortableTextSpan<M> | ToolkitTextNode | ArbitraryTypedObject)[] {\n  const {children, markDefs = []} = block\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n\n  const rootNode: ToolkitNestedPortableTextSpan<M> = {\n    _type: '@span',\n    children: [],\n    markType: '<unknown>',\n  }\n\n  let nodeStack: ToolkitNestedPortableTextSpan<M>[] = [rootNode]\n\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i]\n    if (!span) {\n      continue\n    }\n\n    const marksNeeded = sortedMarks[i] || []\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos]?.markKey || ''\n        const index = marksNeeded.indexOf(mark)\n\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = nodeStack[nodeStack.length - 1]\n    if (!currentNode) {\n      continue\n    }\n\n    for (const markKey of marksNeeded) {\n      const markDef = markDefs.find((def) => def._key === markKey)\n      const markType = markDef ? markDef._type : markKey\n      const node: ToolkitNestedPortableTextSpan<M> = {\n        _type: '@span',\n        _key: span._key,\n        children: [],\n        markDef,\n        markType,\n        markKey,\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    }\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isPortableTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(\n        lines.map((text) => ({_type: '@text', text}))\n      )\n    } else {\n      // This is some other inline object, not a text span\n      currentNode.children = currentNode.children.concat(span)\n    }\n  }\n\n  return rootNode.children\n}\n", "import type {PortableTextBlock, PortableTextListItemBlock, TypedObject} from '@portabletext/types'\nimport type {\n  ToolkitListNestMode,\n  ToolkitPortableTextDirectList,\n  ToolkitPortableTextHtmlList,\n  ToolkitPortableTextList,\n  ToolkitPortableTextListItem,\n} from './types'\nimport {\n  isPortableTextListItemBlock,\n  isPortableTextSpan,\n  isPortableTextToolkitList,\n} from './asserters'\n\nexport type ToolkitNestListsOutputNode<T> =\n  | T\n  | ToolkitPortableTextHtmlList\n  | ToolkitPortableTextDirectList\n\n/**\n * Takes an array of blocks and returns an array of nodes optimized for rendering in HTML-like\n * environment, where lists are nested inside of eachother instead of appearing \"flat\" as in\n * native Portable Text data structures.\n *\n * Note that the list node is not a native Portable Text node type, and thus is represented\n * using the {@link ToolkitPortableTextList | `@list`} type name (`{_type: '@list'}`).\n *\n * The nesting can be configured in two modes:\n *\n * - `direct`: deeper list nodes will appear as a direct child of the parent list\n * - `html`, deeper list nodes will appear as a child of the last _list item_ in the parent list\n *\n * When using `direct`, all list nodes will be of type {@link ToolkitPortableTextDirectList},\n * while with `html` they will be of type {@link ToolkitPortableTextHtmlList}\n *\n * These modes are available as {@link LIST_NEST_MODE_HTML} and {@link LIST_NEST_MODE_DIRECT}.\n *\n * @param blocks - Array of Portable Text blocks and other arbitrary types\n * @param mode - Mode to use for nesting, `direct` or `html`\n * @returns Array of potentially nested nodes optimized for rendering\n */\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct'\n): (T | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'html'\n): (T | ToolkitPortableTextHtmlList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct' | 'html'\n): (T | ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: ToolkitListNestMode\n): ToolkitNestListsOutputNode<T>[] {\n  const tree: ToolkitNestListsOutputNode<T>[] = []\n  let currentList: ToolkitPortableTextList | undefined\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!block) {\n      continue\n    }\n\n    if (!isPortableTextListItemBlock(block)) {\n      tree.push(block)\n      currentList = undefined\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if ((block.level || 1) > currentList.level) {\n      const newList = listFromBlock(block, i, mode)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items.\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // we actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = currentList.children[\n          currentList.children.length - 1\n        ] as ToolkitPortableTextListItem\n\n        const newLastChild: ToolkitPortableTextListItem = {\n          ...lastListItem,\n          children: [...lastListItem.children, newList],\n        }\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        ;(currentList as ToolkitPortableTextDirectList).children.push(\n          newList as ToolkitPortableTextDirectList\n        )\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if ((block.level || 1) < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, {level: block.level || 1})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block, i, mode)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction blockMatchesList(block: PortableTextBlock, list: ToolkitPortableTextList) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(\n  block: PortableTextListItemBlock,\n  index: number,\n  mode: ToolkitListNestMode\n): ToolkitPortableTextList {\n  return {\n    _type: '@list',\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block],\n  }\n}\n\nfunction findListMatching<T extends TypedObject | PortableTextBlock>(\n  rootNode: T,\n  matching: Partial<PortableTextListItemBlock>\n): ToolkitPortableTextList | undefined {\n  const level = matching.level || 1\n  const style = matching.listItem || 'normal'\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    isPortableTextToolkitList(rootNode) &&\n    (rootNode.level || 1) === level &&\n    filterOnType &&\n    (rootNode.listItem || 'normal') === style\n  ) {\n    return rootNode\n  }\n\n  if (!('children' in rootNode)) {\n    return undefined\n  }\n\n  const node = rootNode.children[rootNode.children.length - 1]\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : undefined\n}\n", "import type {ArbitraryTypedObject, PortableTextBlock} from '@portabletext/types'\nimport {isPortableTextBlock, isPortableTextSpan} from './asserters'\n\nconst leadingSpace = /^\\s/\nconst trailingSpace = /^\\s/\n\n/**\n * Takes a Portable Text block (or an array of them) and returns the text value\n * of all the Portable Text span nodes. Adds whitespace when encountering inline,\n * non-span nodes to ensure text flow is optimal.\n *\n * Note that this only accounts for regular Portable Text blocks - any text inside\n * custom content types are not included in the output.\n *\n * @param block - Single block or an array of blocks to extract text from\n * @returns The plain-text content of the blocks\n */\nexport function toPlainText(\n  block: PortableTextBlock | ArbitraryTypedObject[] | PortableTextBlock[]\n): string {\n  const blocks = Array.isArray(block) ? block : [block]\n  let text = ''\n\n  blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) {\n      return\n    }\n\n    let pad = false\n    current.children.forEach((span) => {\n      if (isPortableTextSpan(span)) {\n        // If the previous element was a non-span, and we have no natural whitespace\n        // between the previous and the next span, insert it to give the spans some\n        // room to breathe. However, don't do so if this is the first span.\n        text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? ' ' : ''\n        text += span.text\n        pad = false\n      } else {\n        pad = true\n      }\n    })\n\n    if (index !== blocks.length - 1) {\n      text += '\\n\\n'\n    }\n  })\n\n  return text\n}\n", "import type {ToolkitNestedPortableTextSpan} from './types'\nimport {isPortableTextToolkitSpan, isPortableTextToolkitTextNode} from './asserters'\n\n/**\n * Returns the plain-text representation of a\n * {@link ToolkitNestedPortableTextSpan | toolkit-specific Portable Text span}.\n *\n * Useful if you have a subset of nested nodes and want the text from just those,\n * instead of for the entire Portable Text block.\n *\n * @param span - Span node to get text from (Portable Text toolkit specific type)\n * @returns The plain-text version of the span\n */\nexport function spanToPlainText(span: ToolkitNestedPortableTextSpan): string {\n  let text = ''\n  span.children.forEach((current) => {\n    if (isPortableTextToolkitTextNode(current)) {\n      text += current.text\n    } else if (isPortableTextToolkitSpan(current)) {\n      text += spanToPlainText(current)\n    }\n  })\n  return text\n}\n", "import type {\n  ArbitraryTypedObject,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n} from '@portabletext/types'\n\n/**\n * List nesting mode for HTML, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_HTML = 'html'\n\n/**\n * List nesting mode for direct, nested lists, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_DIRECT = 'direct'\n\n/**\n * List nesting mode, see the {@link nestLists | `nestLists()` function}\n */\nexport type ToolkitListNestMode = 'html' | 'direct'\n\n/**\n * Toolkit-specific type representing a nested list\n *\n * See the `nestLists()` function for more info\n */\nexport type ToolkitPortableTextList = ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList\n\n/**\n * Toolkit-specific type representing a nested list in HTML mode, where deeper lists are nested\n * inside of the _list items_, eg `<ul><li>Some text<ul><li>Deeper</li></ul></li></ul>`\n */\nexport interface ToolkitPortableTextHtmlList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes will appear as children of the _list items_\n   */\n  mode: 'html'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - toolkit-specific list items which can themselves hold deeper lists\n   */\n  children: ToolkitPortableTextListItem[]\n}\n\n/**\n * Toolkit-specific type representing a nested list in \"direct\" mode, where deeper lists are nested\n * inside of the lists children, alongside other blocks.\n */\nexport interface ToolkitPortableTextDirectList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes can appear as direct children\n   */\n  mode: 'direct'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - either portable text list items, or another, deeper list\n   */\n  children: (PortableTextListItemBlock | ToolkitPortableTextDirectList)[]\n}\n\n/**\n * Toolkit-specific type representing a list item block, but where the children can be another list\n */\nexport interface ToolkitPortableTextListItem\n  extends PortableTextListItemBlock<\n    PortableTextMarkDefinition,\n    PortableTextSpan | ToolkitPortableTextList\n  > {}\n\n/**\n * Toolkit-specific type representing a text node, used when nesting spans.\n *\n * See the {@link buildMarksTree | `buildMarksTree()` function}\n */\nexport interface ToolkitTextNode {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@text'\n\n  /**\n   * The actual string value of the text node\n   */\n  text: string\n}\n\n/**\n * Toolkit-specific type representing a portable text span that can hold other spans.\n * In this type, each span only has a single mark, instead of an array of them.\n */\nexport interface ToolkitNestedPortableTextSpan<\n  M extends PortableTextMarkDefinition = PortableTextMarkDefinition\n> {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@span'\n\n  /**\n   * Unique key for this span\n   */\n  _key?: string\n\n  /**\n   * Holds the value (definition) of the mark in the case of annotations.\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markDef?: M\n\n  /**\n   * The key of the mark definition (in the case of annotations).\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markKey?: string\n\n  /**\n   * Type of the mark. For annotations, this is the `_type` property of the value.\n   * For decorators, it will hold the name of the decorator (strong, em or similar).\n   */\n  markType: string\n\n  /**\n   * Child nodes of this span. Can be toolkit-specific text nodes, nested spans\n   * or any inline object type.\n   */\n  children: (\n    | ToolkitTextNode\n    | ToolkitNestedPortableTextSpan<PortableTextMarkDefinition>\n    | ArbitraryTypedObject\n  )[]\n}\n", "import type {PortableTextReactComponents, PortableTextComponents} from '../types'\n\nexport function mergeComponents(\n  parent: PortableTextReactComponents,\n  overrides: PortableTextComponents\n): PortableTextReactComponents {\n  const {block, list, listItem, marks, types, ...rest} = overrides\n  // @todo figure out how to not `as ...` these\n  return {\n    ...parent,\n    block: mergeDeeply(parent, overrides, 'block') as PortableTextReactComponents['block'],\n    list: mergeDeeply(parent, overrides, 'list') as PortableTextReactComponents['list'],\n    listItem: mergeDeeply(parent, overrides, 'listItem') as PortableTextReactComponents['listItem'],\n    marks: mergeDeeply(parent, overrides, 'marks') as PortableTextReactComponents['marks'],\n    types: mergeDeeply(parent, overrides, 'types') as PortableTextReactComponents['types'],\n    ...rest,\n  }\n}\n\nfunction mergeDeeply(\n  parent: PortableTextReactComponents,\n  overrides: PortableTextComponents,\n  key: 'block' | 'list' | 'listItem' | 'marks' | 'types'\n): PortableTextReactComponents[typeof key] {\n  const override = overrides[key]\n  const parentVal = parent[key]\n\n  if (typeof override === 'function') {\n    return override\n  }\n\n  if (override && typeof parentVal === 'function') {\n    return override\n  }\n\n  if (override) {\n    return {...parentVal, ...override} as PortableTextReactComponents[typeof key]\n  }\n\n  return parentVal\n}\n", "import type {TypedObject} from '@portabletext/types'\nimport React from 'react'\nimport type {PortableTextMarkComponent} from '../types'\n\ninterface DefaultLink extends TypedObject {\n  _type: 'link'\n  href: string\n}\n\nconst link: PortableTextMarkComponent<DefaultLink> = ({children, value}) => (\n  <a href={value?.href}>{children}</a>\n)\n\nconst underlineStyle = {textDecoration: 'underline'}\n\nexport const defaultMarks: Record<string, PortableTextMarkComponent | undefined> = {\n  em: ({children}) => <em>{children}</em>,\n  strong: ({children}) => <strong>{children}</strong>,\n  code: ({children}) => <code>{children}</code>,\n  underline: ({children}) => <span style={underlineStyle}>{children}</span>,\n  'strike-through': ({children}) => <del>{children}</del>,\n  link,\n}\n", "import React from 'react'\nimport type {PortableTextListComponent, PortableTextListItemComponent} from '../types'\n\nexport const defaultLists: Record<'number' | 'bullet', PortableTextListComponent> = {\n  number: ({children}) => <ol>{children}</ol>,\n  bullet: ({children}) => <ul>{children}</ul>,\n}\n\nexport const DefaultListItem: PortableTextListItemComponent = ({children}) => <li>{children}</li>\n", "const getTemplate = (type: string, prop: string): string =>\n  `[@portabletext/react] Unknown ${type}, specify a component for it in the \\`components.${prop}\\` prop`\n\nexport const unknownTypeWarning = (typeName: string): string =>\n  getTemplate(`block type \"${typeName}\"`, 'types')\n\nexport const unknownMarkWarning = (markType: string): string =>\n  getTemplate(`mark type \"${markType}\"`, 'marks')\n\nexport const unknownBlockStyleWarning = (blockStyle: string): string =>\n  getTemplate(`block style \"${blockStyle}\"`, 'block')\n\nexport const unknownListStyleWarning = (listStyle: string): string =>\n  getTemplate(`list style \"${listStyle}\"`, 'list')\n\nexport const unknownListItemStyleWarning = (listStyle: string): string =>\n  getTemplate(`list item style \"${listStyle}\"`, 'listItem')\n\nexport function printWarning(message: string): void {\n  console.warn(message)\n}\n", "import React from 'react'\nimport type {PortableTextReactComponents} from '../types'\nimport {unknownTypeWarning} from '../warnings'\n\nconst hidden = {display: 'none'}\n\nexport const DefaultUnknownType: PortableTextReactComponents['unknownType'] = ({\n  value,\n  isInline,\n}) => {\n  const warning = unknownTypeWarning(value._type)\n  return isInline ? <span style={hidden}>{warning}</span> : <div style={hidden}>{warning}</div>\n}\n\nexport const DefaultUnknownMark: PortableTextReactComponents['unknownMark'] = ({\n  markType,\n  children,\n}) => {\n  return <span className={`unknown__pt__mark__${markType}`}>{children}</span>\n}\n\nexport const DefaultUnknownBlockStyle: PortableTextReactComponents['unknownBlockStyle'] = ({\n  children,\n}) => {\n  return <p>{children}</p>\n}\n\nexport const DefaultUnknownList: PortableTextReactComponents['unknownList'] = ({children}) => {\n  return <ul>{children}</ul>\n}\n\nexport const DefaultUnknownListItem: PortableTextReactComponents['unknownListItem'] = ({\n  children,\n}) => {\n  return <li>{children}</li>\n}\n", "import React from 'react'\nimport type {PortableTextBlockStyle} from '@portabletext/types'\nimport type {PortableTextBlockComponent, PortableTextReactComponents} from '../types'\nimport {defaultMarks} from './marks'\nimport {defaultLists, DefaultListItem} from './list'\nimport {\n  DefaultUnknownType,\n  DefaultUnknownMark,\n  DefaultUnknownList,\n  DefaultUnknownListItem,\n  DefaultUnknownBlockStyle,\n} from './unknown'\n\nexport const DefaultHardBreak = () => <br />\n\nexport const defaultBlockStyles: Record<\n  PortableTextBlockStyle,\n  PortableTextBlockComponent | undefined\n> = {\n  normal: ({children}) => <p>{children}</p>,\n  blockquote: ({children}) => <blockquote>{children}</blockquote>,\n  h1: ({children}) => <h1>{children}</h1>,\n  h2: ({children}) => <h2>{children}</h2>,\n  h3: ({children}) => <h3>{children}</h3>,\n  h4: ({children}) => <h4>{children}</h4>,\n  h5: ({children}) => <h5>{children}</h5>,\n  h6: ({children}) => <h6>{children}</h6>,\n}\n\nexport const defaultComponents: PortableTextReactComponents = {\n  types: {},\n\n  block: defaultBlockStyles,\n  marks: defaultMarks,\n  list: defaultLists,\n  listItem: DefaultListItem,\n  hardBreak: DefaultHardBreak,\n\n  unknownType: DefaultUnknownType,\n  unknownMark: DefaultUnknownMark,\n  unknownList: DefaultUnknownList,\n  unknownListItem: DefaultUnknownListItem,\n  unknownBlockStyle: DefaultUnknownBlockStyle,\n}\n", "import React, {ReactNode, useMemo} from 'react'\nimport {\n  LIST_NEST_MODE_HTML,\n  ToolkitNestedPortableTextSpan,\n  ToolkitTextNode,\n} from '@portabletext/toolkit'\nimport type {\n  MissingComponentHandler,\n  NodeRenderer,\n  PortableTextProps,\n  PortableTextReactComponents,\n  ReactPortableTextList,\n  Serializable,\n  SerializedBlock,\n} from './types'\nimport {\n  isPortableTextBlock,\n  isPortableTextListItemBlock,\n  isPortableTextToolkitList,\n  isPortableTextToolkitSpan,\n  isPortableTextToolkitTextNode,\n  nestLists,\n  spanToPlainText,\n  buildMarksTree,\n} from '@portabletext/toolkit'\nimport type {\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\nimport {mergeComponents} from './components/merge'\nimport {defaultComponents} from './components/defaults'\nimport {\n  printWarning,\n  unknownBlockStyleWarning,\n  unknownListItemStyleWarning,\n  unknownListStyleWarning,\n  unknownMarkWarning,\n  unknownTypeWarning,\n} from './warnings'\n\nexport function PortableText<B extends TypedObject = PortableTextBlock>({\n  value: input,\n  components: componentOverrides,\n  listNestingMode,\n  onMissingComponent: missingComponentHandler = printWarning,\n}: PortableTextProps<B>) {\n  const handleMissingComponent = missingComponentHandler || noop\n  const blocks = Array.isArray(input) ? input : [input]\n  const nested = nestLists(blocks, listNestingMode || LIST_NEST_MODE_HTML)\n\n  const components = useMemo(() => {\n    return componentOverrides\n      ? mergeComponents(defaultComponents, componentOverrides)\n      : defaultComponents\n  }, [componentOverrides])\n\n  const renderNode = useMemo(\n    () => getNodeRenderer(components, handleMissingComponent),\n    [components, handleMissingComponent]\n  )\n  const rendered = nested.map((node, index) =>\n    renderNode({node: node, index, isInline: false, renderNode})\n  )\n\n  return <>{rendered}</>\n}\n\nconst getNodeRenderer = (\n  components: PortableTextReactComponents,\n  handleMissingComponent: MissingComponentHandler\n): NodeRenderer => {\n  function renderNode<N extends TypedObject>(options: Serializable<N>): ReactNode {\n    const {node, index, isInline} = options\n    const key = node._key || `node-${index}`\n\n    if (isPortableTextToolkitList(node)) {\n      return renderList(node, index, key)\n    }\n\n    if (isPortableTextListItemBlock(node)) {\n      return renderListItem(node, index, key)\n    }\n\n    if (isPortableTextToolkitSpan(node)) {\n      return renderSpan(node, index, key)\n    }\n\n    if (isPortableTextBlock(node)) {\n      return renderBlock(node, index, key, isInline)\n    }\n\n    if (isPortableTextToolkitTextNode(node)) {\n      return renderText(node, key)\n    }\n\n    return renderCustomBlock(node, index, key, isInline)\n  }\n\n  /* eslint-disable react/jsx-no-bind */\n  function renderListItem(\n    node: PortableTextListItemBlock<PortableTextMarkDefinition, PortableTextSpan>,\n    index: number,\n    key: string\n  ) {\n    const tree = serializeBlock({node, index, isInline: false, renderNode})\n    const renderer = components.listItem\n    const handler = typeof renderer === 'function' ? renderer : renderer[node.listItem]\n    const Li = handler || components.unknownListItem\n\n    if (Li === components.unknownListItem) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListItemStyleWarning(style), {\n        type: style,\n        nodeType: 'listItemStyle',\n      })\n    }\n\n    let children = tree.children\n    if (node.style && node.style !== 'normal') {\n      // Wrap any other style in whatever the block serializer says to use\n      const {listItem, ...blockNode} = node\n      children = renderNode({node: blockNode, index, isInline: false, renderNode})\n    }\n\n    return (\n      <Li key={key} value={node} index={index} isInline={false} renderNode={renderNode}>\n        {children}\n      </Li>\n    )\n  }\n\n  function renderList(node: ReactPortableTextList, index: number, key: string) {\n    const children = node.children.map((child, childIndex) =>\n      renderNode({\n        node: child._key ? child : {...child, _key: `li-${index}-${childIndex}`},\n        index: index,\n        isInline: false,\n        renderNode,\n      })\n    )\n\n    const component = components.list\n    const handler = typeof component === 'function' ? component : component[node.listItem]\n    const List = handler || components.unknownList\n\n    if (List === components.unknownList) {\n      const style = node.listItem || 'bullet'\n      handleMissingComponent(unknownListStyleWarning(style), {nodeType: 'listStyle', type: style})\n    }\n\n    return (\n      <List key={key} value={node} index={index} isInline={false} renderNode={renderNode}>\n        {children}\n      </List>\n    )\n  }\n\n  function renderSpan(node: ToolkitNestedPortableTextSpan, _index: number, key: string) {\n    const {markDef, markType, markKey} = node\n    const Span = components.marks[markType] || components.unknownMark\n    const children = node.children.map((child, childIndex) =>\n      renderNode({node: child, index: childIndex, isInline: true, renderNode})\n    )\n\n    if (Span === components.unknownMark) {\n      handleMissingComponent(unknownMarkWarning(markType), {nodeType: 'mark', type: markType})\n    }\n\n    return (\n      <Span\n        key={key}\n        text={spanToPlainText(node)}\n        value={markDef}\n        markType={markType}\n        markKey={markKey}\n        renderNode={renderNode}\n      >\n        {children}\n      </Span>\n    )\n  }\n\n  function renderBlock(node: PortableTextBlock, index: number, key: string, isInline: boolean) {\n    const {_key, ...props} = serializeBlock({node, index, isInline, renderNode})\n    const style = props.node.style || 'normal'\n    const handler =\n      typeof components.block === 'function' ? components.block : components.block[style]\n    const Block = handler || components.unknownBlockStyle\n\n    if (Block === components.unknownBlockStyle) {\n      handleMissingComponent(unknownBlockStyleWarning(style), {\n        nodeType: 'blockStyle',\n        type: style,\n      })\n    }\n\n    return <Block key={key} {...props} value={props.node} renderNode={renderNode} />\n  }\n\n  function renderText(node: ToolkitTextNode, key: string) {\n    if (node.text === '\\n') {\n      const HardBreak = components.hardBreak\n      return HardBreak ? <HardBreak key={key} /> : '\\n'\n    }\n\n    return node.text\n  }\n\n  function renderCustomBlock(node: TypedObject, index: number, key: string, isInline: boolean) {\n    const Node = components.types[node._type]\n\n    const nodeOptions = {\n      value: node,\n      isInline,\n      index,\n      renderNode,\n    }\n\n    if (Node) {\n      return <Node key={key} {...nodeOptions} />\n    }\n\n    handleMissingComponent(unknownTypeWarning(node._type), {nodeType: 'block', type: node._type})\n\n    const UnknownType = components.unknownType\n    return <UnknownType key={key} {...nodeOptions} />\n  }\n  /* eslint-enable react/jsx-no-bind */\n\n  return renderNode\n}\n\nfunction serializeBlock(options: Serializable<PortableTextBlock>): SerializedBlock {\n  const {node, index, isInline, renderNode} = options\n  const tree = buildMarksTree(node)\n  const children = tree.map((child, i) =>\n    renderNode({node: child, isInline: true, index: i, renderNode})\n  )\n\n  return {\n    _key: node._key || `block-${index}`,\n    children,\n    index,\n    isInline,\n    node,\n  }\n}\n\nfunction noop() {\n  // Intentional noop\n}\n", "import React from 'react'\nimport urlBuilder from '@sanity/image-url'\nimport {getImageDimensions} from '@sanity/asset-utils'\nimport type {SanityImageSource} from '@sanity/asset-utils'\nimport type {PortableTextComponentProps} from '@portabletext/react'\nimport {projectDetails} from '~/sanity/projectDetails'\n\ntype SanityImageAssetWithAlt = SanityImageSource & {alt?: string}\n\nexport default function SanityImage(props: PortableTextComponentProps<SanityImageAssetWithAlt>) {\n  const {value, isInline} = props\n  const {width, height} = getImageDimensions(value)\n\n  return (\n    <img\n      className=\"not-prose h-auto w-full\"\n      src={urlBuilder(projectDetails())\n        .image(value)\n        .width(isInline ? 100 : 800)\n        .fit('max')\n        .auto('format')\n        .url()}\n      alt={value.alt || ''}\n      loading=\"lazy\"\n      style={{\n        // Display alongside text if image appears inside a block text span\n        display: isInline ? 'inline-block' : 'block',\n\n        // Avoid jumping around with aspect-ratio CSS property\n        aspectRatio: width / height,\n      }}\n    />\n  )\n}\n", "/* eslint-disable prettier/prettier */\nimport React from 'react';\nimport { PortableText } from '@portabletext/react';\n\nimport SanityImage from '~/components/SanityImage';\n\ntype ContentProps = {\n  value: any[];\n};\n\nconst components = {\n  types: {\n    image: SanityImage,\n  },\n};\n\nexport default function SanityContent(props: ContentProps) {\n  const { value } = props;\n\n  return (\n    <div className='prose font-serif dark:prose-invert md:prose-2xl prose-a:text-cyan-600 dark:prose-a:text-cyan-200'>\n      <PortableText value={value} components={components} />\n    </div>\n  );\n}\n", "import React from 'react'\n\nexport default function ExitPreview() {\n  return (\n    <div className=\"pointer-events-none fixed inset-0 flex h-screen w-screen items-end justify-center\">\n      <form className=\"pointer-events-auto\" action=\"/resource/preview\" method=\"POST\">\n        <button className=\"bg-black p-4 font-bold text-white\" type=\"submit\">\n          Exit Preview Mode\n        </button>\n      </form>\n    </div>\n  )\n}\n", "/* eslint-disable prettier/prettier */\nimport React from 'react';\nimport { definePreview } from '@sanity/preview-kit';\n\nimport SanityContent from '~/components/SanityContent';\nimport { projectDetails } from '~/sanity/projectDetails';\nimport type { RecordDocument } from '~/types/product';\nimport Layout from '~/components/Layout';\nimport Title from '~/components/Title';\nimport AlbumCover from '~/components/RecordCover';\nimport ExitPreview from '~/components/ExitPreview';\nimport { Link } from '@remix-run/react';\n\nexport default function Record(props: RecordDocument) {\n  const {\n    _id,\n    title,\n    referral,\n    category,\n    categoryslug,\n    tags,\n    content,\n    overview,\n    support,\n    ease,\n    image,\n    features,\n    pros,\n    cons,\n    score,\n    pricing,\n  } = props;\n\n  const nonYellowStar = (\n    <svg\n      aria-hidden='true'\n      className='h-5 w-5 text-gray-300 dark:text-gray-500'\n      fill='currentColor'\n      viewBox='0 0 20 20'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path d='M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z'></path>\n    </svg>\n  );\n  const yellowStar = (\n    <svg\n      aria-hidden='true'\n      className='h-5 w-5 text-yellow-400'\n      fill='currentColor'\n      viewBox='0 0 20 20'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path d='M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z'></path>\n    </svg>\n  );\n\n  const starIcons = Array(5)\n    .fill(nonYellowStar)\n    .map((star, index) => {\n      if (index < (score ?? 0)) {\n        return yellowStar;\n      }\n      return star;\n    });\n\n  return (\n    <Layout>\n      <section className=' mb-6 border p-4 md:p-6  '>\n        <div className='mx-auto  grid  gap-4 md:py-8 lg:grid-cols-12 lg:gap-8 lg:py-16 xl:gap-0'>\n          <div className='order-2 mr-auto space-y-2 place-self-center md:order-1 lg:col-span-7'>\n            <header className='space-y-4'>\n              {category ? (\n                <h2 className='  text-xs uppercase tracking-widest opacity-70 '>\n                  Category:{' '}\n                  <Link\n                    to={'/categories/' + categoryslug}\n                    className='text-xs underline'\n                  >\n                    {category}\n                  </Link>\n                </h2>\n              ) : null}\n              {title ? <Title>{title}</Title> : null}\n              {content && content?.length > 0 ? (\n                <section className=' text-6xl  italic  '>\n                  <SanityContent value={content} />\n                </section>\n              ) : null}\n\n              {tags ? (\n                <>\n                  <h2 className='text-xs  uppercase tracking-widest opacity-70 '>\n                    Tags:\n                  </h2>\n                  {tags.map((tag) => (\n                    <div\n                      key={tag._key}\n                      className=' mx-2 my-4 inline-flex  rounded-lg bg-blue-300 py-2 px-3 lowercase tracking-widest'\n                    >\n                      <Link to={'/tags/' + tag.slug} className='text-xs'>\n                        {tag.title}{' '}\n                      </Link>\n                    </div>\n                  ))}\n                </>\n              ) : null}\n              {score ? (\n                <section>\n                  <h2 className='text-xs  uppercase tracking-widest opacity-70 '>\n                    Score:\n                  </h2>{' '}\n                  <span className='text-4xl text-yellow-500'></span>\n                  <div className='flex items-center'>\n                    {starIcons}\n                    <p className='ml-2 text-sm font-medium text-gray-500 dark:text-gray-400'>\n                      {score} out of 5\n                    </p>\n                  </div>\n                </section>\n              ) : null}\n              {pricing ? (\n                <section>\n                  <h2 className='text-xs  uppercase tracking-widest opacity-70 '>\n                    Price Range:\n                  </h2>{' '}\n                  <p className='text-bold font-serif text-2xl italic text-green-600'>\n                    {' '}\n                    {pricing}\n                  </p>\n                </section>\n              ) : null}\n              <a\n                href='#overview'\n                className=' mr-4 inline-flex border-2 border-blue-300 py-4 px-12 text-blue-600 dark:text-blue-300 '\n              >\n                Learn more\n              </a>\n              {referral ? (\n                <a\n                  className=' from-blue-5 200 inline-flex border-2 border-blue-500 bg-blue-500  py-4\n                  px-12 text-white'\n                  href={referral}\n                >\n                  Try {title} now\n                </a>\n              ) : null}\n            </header>\n          </div>\n          <div className='order-1 md:order-2 lg:col-span-5 lg:mt-0 lg:flex'>\n            <AlbumCover image={image} title={title} />\n          </div>\n        </div>\n      </section>\n\n      <article className='flex flex-col items-start gap-4 lg:flex-row lg:gap-12'>\n        <div className='grid-gap-4 top-1 mx-auto grid grid-cols-1 space-y-4 md:sticky md:max-w-[70vw]'>\n          <AlbumCover image={image} title={title} />\n          {features && features?.length > 0 ? (\n            <>\n              <ul className='grid grid-cols-1 divide-y divide-gray-100 rounded border bg-[#ffffff] p-4 dark:divide-gray-900 dark:bg-[#111111]'>\n                <li className='featureing-tighter py-3 text-2xl font-bold'>\n                  {features?.length === 1\n                    ? `1 Great Feature`\n                    : `${features?.length} Key Features`}\n                </li>\n                {features.map((feature) => (\n                  <li\n                    key={feature._key}\n                    className='flex items-center justify-between py-3'\n                  >\n                    <span className='text-lg'>{feature.title}</span>\n                  </li>\n                ))}\n              </ul>\n            </>\n          ) : null}\n        </div>\n        <div className=' flex flex-shrink-0 flex-col gap-4 md:gap-4 lg:w-2/3'>\n          {overview && overview?.length > 0 ? (\n            <section id='overview'>\n              <h2 className='text-2xl'>Overview</h2>\n              <SanityContent value={overview} />\n            </section>\n          ) : null}\n          {ease && ease?.length > 0 ? (\n            <section className='mt-6 border-t border-gray-400 py-6'>\n              <h2 className='text-2xl '>Ease of Use</h2>\n              <SanityContent value={ease} />\n            </section>\n          ) : null}\n          {support && support?.length > 0 ? (\n            <section className='mt-6 border-t border-gray-400 py-6'>\n              <h2 className='text-2xl '>Customer Support</h2>\n              <SanityContent value={support} />\n            </section>\n          ) : null}\n          {referral ? (\n            <a\n              href={referral}\n              className='mr-auto w-auto border-2 border-purple-500 py-4 px-12 text-purple-500'\n            >\n              Try Out Now\n            </a>\n          ) : null}\n\n          {pros && cons && pros?.length > 0 && cons?.length > 0 ? (\n            <section>\n              <h2 className=' py-3 text-2xl font-bold'>Pros & Cons</h2>\n              <div className='grid divide-x divide-gray-100 dark:divide-gray-900  md:grid-cols-2'>\n                {pros && pros?.length > 0 ? (\n                  <div className='p-4'>\n                    <h2>Pros</h2>\n                    <ul className='grid grid-cols-1 divide-y divide-gray-100 dark:divide-gray-900'>\n                      {pros.map((pro) => (\n                        <li\n                          key={pro._key}\n                          className='flex items-center justify-between py-3'\n                        >\n                          <span className='text-lg'>\uD83D\uDC4D {pro.title}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                ) : null}\n                {cons && cons?.length > 0 ? (\n                  <div className='p-4'>\n                    <h2 className='text-sm uppercase'>Cons</h2>\n\n                    <ul className=' grid grid-cols-1 divide-y divide-gray-100 dark:divide-gray-900'>\n                      {cons.map((con) => (\n                        <li key={con._key} className=' py-3'>\n                          <h3 className='text-lg'>\uD83D\uDC4E {con.title}</h3>\n                          <span className='text-lg'> {con.description}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                ) : null}\n              </div>\n            </section>\n          ) : null}\n        </div>\n      </article>\n    </Layout>\n  );\n}\n\ntype PreviewRecordProps = {\n  query: string;\n  params: { [key: string]: string };\n  token: string | null;\n};\n\nconst { projectId, dataset } = projectDetails();\nconst usePreview = definePreview({ projectId, dataset });\n\nexport function PreviewRecord(props: PreviewRecordProps) {\n  const { query, params, token } = props;\n\n  const data = usePreview(token ?? null, query, params);\n\n  return (\n    <>\n      <ExitPreview />\n      <Record {...data} />\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["entry", "_checkAuth", "projectId", "token", "headers", "Authorization", "res", "fetch", "credentials", "json", "Boolean", "id", "_lazyGroqStore", "pkg", "groqStore", "default", "_lazyEventSourcePolyfill", "EventSourcePolyfill", "useParams", "params", "stringifiedParams", "useMemo", "JSON", "stringify", "parse", "_definePreview", "dataset", "documentLimit", "subscriptionThrottleMs", "overlayDrafts", "importEventSourcePolyfill", "importGroqStore", "preload", "onPublicAccessOnly", "checkAuth", "includeTypes", "console", "warn", "usePreview", "store", "query", "_params", "_serverSnapshot", "document", "Error", "serverSnapshot", "useState", "hasAuth", "EventSource", "listen", "initial", "syncStore", "snapshot", "getServerSnapshot", "getSnapshot", "subscribe", "onStoreChange", "subscription", "err", "result", "error", "unsubscribe", "useEffect", "callback", "close", "window", "addEventListener", "removeEventListener", "useSyncExternalStore", "_preloadQuery", "definePreview", "config", "suspend", "PreviewSuspense", "children", "fallback", "mounted", "mount", "useReducer", "jsx", "Suspense", "isPortableTextSpan", "node", "_type", "text", "marks", "Array", "isArray", "every", "mark", "isPortableTextBlock", "markDefs", "def", "_key", "children", "child", "isPortableTextListItemBlock", "block", "listItem", "level", "isPortableTextToolkitList", "isPortableTextToolkitSpan", "span", "isPortableTextToolkitTextNode", "knownDecorators", "sortMarksByOccurences", "index", "blockChildren", "length", "slice", "occurences", "forEach", "siblingIndex", "sibling", "indexOf", "sort", "markA", "markB", "sortMarks", "aOccurences", "bOccurences", "aKnownPos", "bKnownPos", "localeCompare", "buildMarksTree", "_a", "sortedMarks", "map", "rootNode", "markType", "nodeStack", "i", "marksNeeded", "pos", "markKey", "splice", "currentNode", "markDef", "find", "push", "lines", "split", "line", "concat", "nestLists", "blocks", "mode", "tree", "currentList", "listFromBlock", "blockMatchesList", "newList", "lastListItem", "newLastChild", "matchingBranch", "match", "findListMatching", "console", "warn", "list", "matching", "style", "filterOnType", "spanToPlainText", "span", "text", "children", "forEach", "current", "isPortableTextToolkitTextNode", "isPortableTextToolkitSpan", "LIST_NEST_MODE_HTML", "mergeComponents", "parent", "overrides", "block", "list", "listItem", "marks", "types", "rest", "mergeDeeply", "key", "override", "parentVal", "link", "children", "value", "jsx", "href", "underlineStyle", "textDecoration", "defaultMarks", "em", "strong", "code", "underline", "style", "defaultLists", "number", "bullet", "DefaultListItem", "getTemplate", "type", "prop", "unknownTypeWarning", "typeName", "unknownMarkWarning", "markType", "unknownBlockStyleWarning", "blockStyle", "unknownListStyleWarning", "listStyle", "unknownListItemStyleWarning", "printWarning", "message", "console", "warn", "hidden", "display", "DefaultUnknownType", "isInline", "warning", "_type", "DefaultUnknownMark", "className", "DefaultUnknownBlockStyle", "DefaultUnknownList", "DefaultUnknownListItem", "DefaultHardBreak", "defaultBlockStyles", "normal", "blockquote", "h1", "h2", "h3", "h4", "h5", "h6", "defaultComponents", "hardBreak", "unknownType", "unknownMark", "unknownList", "unknownListItem", "unknownBlockStyle", "PortableText", "input", "components", "componentOverrides", "listNestingMode", "onMissingComponent", "missingComponentHandler", "handleMissingComponent", "noop", "blocks", "Array", "isArray", "nested", "nestLists", "LIST_NEST_MODE_HTML", "useMemo", "renderNode", "getNodeRenderer", "rendered", "map", "node", "index", "options", "_key", "isPortableTextToolkitList", "renderList", "isPortableTextListItemBlock", "renderListItem", "isPortableTextToolkitSpan", "renderSpan", "isPortableTextBlock", "renderBlock", "isPortableTextToolkitTextNode", "renderText", "renderCustomBlock", "tree", "serializeBlock", "renderer", "handler", "Li", "nodeType", "blockNode", "child", "childIndex", "component", "List", "_index", "markDef", "markKey", "Span", "text", "spanToPlainText", "props", "Block", "HardBreak", "Node", "nodeOptions", "UnknownType", "buildMarksTree", "i", "urlBuilder", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "import_jsx_dev_runtime", "query"]
}
