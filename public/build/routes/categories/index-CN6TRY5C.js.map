{
  "version": 3,
  "sources": ["../../../../app/routes/categories/index.tsx"],
  "sourcesContent": ["/* eslint-disable prettier/prettier */\nimport type { LinksFunction, LoaderArgs, MetaFunction } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Link, useLoaderData } from '@remix-run/react';\nimport groq from 'groq';\nimport { useRouteData } from 'remix-utils';\n\nimport AlbumCover from '~/components/RecordCover';\nimport Layout from '~/components/Layout';\nimport Title from '~/components/Title';\nimport { getClient } from '~/sanity/client';\nimport stylesheet from '~/tailwind.css';\nimport { categoryZ, categoriesZ, productStubsZ } from '~/types/product';\nimport type { HomeDocument } from '~/types/home';\nimport SanityContent from '~/components/SanityContent';\nimport ProductCard from '~/components/ProductCard';\n\nexport const links: LinksFunction = () => {\n  return [{ rel: 'stylesheet', href: stylesheet }];\n};\n\nexport const meta: MetaFunction = (data) => {\n  const home = data.parentsData.root.home as HomeDocument;\n\n  return {\n    title: ['Browse AI Tool Categories', home.siteTitle]\n      .filter(Boolean)\n      .join(' | '),\n    description:\n      'Browse the different types of AI tools listed by category type.',\n  };\n};\n\nexport const loader = async (props: LoaderArgs) => {\n  const categoryQuery = groq`*[_type == \"category\" ]{\n      title,\n      image,\n      slug\n    }`;\n\n  const categories = await getClient()\n    .fetch(categoryQuery)\n    .then((res) => (res ? categoriesZ.parse(res) : null));\n\n  if (!categories) {\n    throw new Response('Not found', { status: 404 });\n  }\n\n  return json({ categories });\n};\n\nexport default function Index() {\n  const { categories } = useLoaderData<typeof loader>();\n\n  return (\n    <Layout>\n      <div className='grid grid-cols-1 gap-6 md:gap-12'>\n        <header className='space-y-4'>\n          <Title>All Categories</Title>\n        </header>\n        {categories.length > 0 ? (\n          <>\n            {categories.map((category) => (\n              <Link\n                to={'/categories/' + category.slug.current}\n                key={category.title}\n              >\n                {category.title}\n              </Link>\n            ))}\n          </>\n        ) : (\n          <p> No products found </p>\n        )}\n      </div>\n    </Layout>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAIA,kBAAiB;AAsDP;AAzCH,IAAM,QAAuB,MAAM;AACxC,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM,iBAAW,CAAC;AACjD;AAEO,IAAM,OAAqB,CAAC,SAAS;AAC1C,QAAM,OAAO,KAAK,YAAY,KAAK;AAEnC,SAAO;AAAA,IACL,OAAO,CAAC,6BAA6B,KAAK,SAAS,EAChD,OAAO,OAAO,EACd,KAAK,KAAK;AAAA,IACb,aACE;AAAA,EACJ;AACF;AAoBe,SAAR,QAAyB;AAC9B,QAAM,EAAE,WAAW,IAAI,cAA6B;AAEpD,SACE,mDAAC,UACC,6DAAC,SAAI,WAAU,oCACb;AAAA,uDAAC,YAAO,WAAU,aAChB,6DAAC,SAAM,8BAAP;AAAA;AAAA;AAAA;AAAA,WAAqB,KADvB;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACC,WAAW,SAAS,IACnB,sFACG,qBAAW,IAAI,CAAC,aACf;AAAA,MAAC;AAAA;AAAA,QACC,IAAI,iBAAiB,SAAS,KAAK;AAAA,QAGlC,mBAAS;AAAA;AAAA,MAFL,SAAS;AAAA,MAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CACD,KARH;AAAA;AAAA;AAAA;AAAA,WASA,IAEA,mDAAC,OAAE,mCAAH;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,OAhB1B;AAAA;AAAA;AAAA;AAAA,SAkBA,KAnBF;AAAA;AAAA;AAAA;AAAA,SAoBA;AAEJ;",
  "names": []
}
