{
  "version": 3,
  "sources": ["../../../../app/routes/categories/$slug.tsx"],
  "sourcesContent": ["/* eslint-disable prettier/prettier */\n// File: /categories/$slug.tsx\n\nimport { Link, useLoaderData, useParams } from '@remix-run/react';\nimport groq from 'groq';\nimport { json } from '@remix-run/node';\nimport type { productsZ, RecordDocument } from '~/types/product';\nimport { categoryZ, productStubsZ, groupedProductsZ } from '~/types/product';\n\nimport type { LinksFunction, LoaderArgs } from '@remix-run/node';\nimport Layout from '~/components/Layout';\nimport stylesheet from '~/tailwind.css';\nimport AlbumCover from '~/components/RecordCover';\n\nimport { getClient } from '~/sanity/client';\nimport Title from '~/components/Title';\n\nexport const links: LinksFunction = () => {\n  return [{ rel: 'stylesheet', href: stylesheet }];\n};\n\n// Load the `category` document with this slug\nexport const loader = async (props: LoaderArgs) => {\n  const { slug } = props.params;\n  const categoryQuery = groq`*[_type == \"category\" && slug.current == $slug][0] {\n    title,\n    image,\n    slug\n  }`;\n\n  const category = await getClient()\n    .fetch(categoryQuery, { slug })\n    .then((res) => (res ? categoryZ.parse(res) : null));\n\n  if (!category) {\n    throw new Response('Not found', { status: 404 });\n  }\n\n  const productsQuery = groq`*[_type == \"product\" && references(*[_type == \"category\" && slug.current == $slug]._id)] | order(publishedAt desc) [0...12]{\n    _id,\n    title,\n    metadescription,\n    \"slug\": slug.current,\n    \"category\": category->title,\n    \"tags\": tags[]->{\n      title,\n      \"slug\": slug.current\n    },\n    image\n  }`;\n\n  const products = await getClient()\n    .fetch(productsQuery, { slug })\n    .then((res) => (res ? groupedProductsZ.parse(res) : null));\n\n  if (!products) {\n    throw new Response('Not found', { status: 404 });\n  }\n\n  return json({ category, products });\n};\n\nfunction groupProductsByTags<T>(products: T[]): {\n  [key: string]: T[];\n} {\n  const groupedProducts: { [key: string]: T[] } = {};\n\n  products.forEach((product: any) => {\n    if (product.tags) {\n      product.tags.forEach((tag: any) => {\n        const tagName = tag.title;\n        if (tagName) {\n          if (!groupedProducts[tagName]) {\n            groupedProducts[tagName] = [];\n          }\n          groupedProducts[tagName].push(product);\n        }\n      });\n    }\n  });\n\n  return groupedProducts;\n}\n\nexport default function Categories() {\n  const { category, products } = useLoaderData<typeof loader>();\n  const params = useParams();\n  const groupedProducts = groupProductsByTags(products);\n  console.log('Grouped products:', groupedProducts);\n\n  return (\n    <Layout>\n      <div>\n        <section className=' mb-6 border p-6  '>\n          <div className='mx-auto grid   py-8 lg:grid-cols-12 lg:gap-8 lg:py-16 xl:gap-0'>\n            <div className='mr-auto space-y-2 place-self-center lg:col-span-7'>\n              <header className='space-y-4'>\n                <Title>\n                  The <span className='text-blue-500'>Howtu.ai</span> guide to{' '}\n                  <span className='text-gray-400 '>{category.title}</span> AI\n                  products\n                </Title>\n              </header>\n            </div>\n            <div className='hidden lg:col-span-5 lg:mt-0 lg:flex'>\n              <AlbumCover image={category.image} title={category.title} />\n            </div>\n          </div>\n        </section>\n        {products.length > 0 ? (\n          <div className='grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3'>\n            {products.map((product) => (\n              <div key={product._id} className='rounded border p-4'>\n                <h3 className='text-xl'>{product.title}</h3>\n                {product.image && (\n                  <>\n                    <AlbumCover image={product.image} title={product.title} />\n                  </>\n                )}\n                <p>{product.category}</p>\n                <Link to={`/products/${product.slug}`} className='underline'>\n                  View Product\n                </Link>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p>No products found with this tag.</p>\n        )}\n\n        {Object.keys(groupedProducts).length > 0 ? (\n          Object.keys(groupedProducts).map((tagTitle) => (\n            <div key={tagTitle}>\n              <h2 className='my-4 text-2xl'>{tagTitle}</h2>\n              <div className='grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3'>\n                {groupedProducts[tagTitle].map((product) => (\n                  <div key={product._id} className='rounded border p-4'>\n                    <h3 className='text-xl'>{product.title}</h3>\n                    {product.image && (\n                      <>\n                        <AlbumCover\n                          image={product.image}\n                          title={product.title}\n                        />\n                      </>\n                    )}\n                    <p>{product.category}</p>\n                    <Link\n                      to={`/products/${product.slug}`}\n                      className='underline'\n                    >\n                      View Product\n                    </Link>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))\n        ) : (\n          <p>No products found with this tag.</p>\n        )}\n      </div>\n    </Layout>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
