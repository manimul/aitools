{
  "version": 3,
  "sources": ["../../../../app/routes/guides/index.tsx"],
  "sourcesContent": ["/* eslint-disable prettier/prettier */\nimport type { LinksFunction, LoaderArgs, MetaFunction } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Link, useLoaderData } from '@remix-run/react';\nimport groq from 'groq';\nimport { projectDetails } from '~/sanity/projectDetails';\n\nimport { guidesZ } from '~/types/content';\nimport urlBuilder from '@sanity/image-url';\n\nimport AlbumCover from '~/components/RecordCover';\n\nimport Layout from '~/components/Layout';\nimport Title from '~/components/Title';\nimport { getClient } from '~/sanity/client';\nimport stylesheet from '~/tailwind.css';\nimport type { HomeDocument } from '~/types/home';\n\nexport const links: LinksFunction = () => {\n  return [{ rel: 'stylesheet', href: stylesheet }];\n};\n\nexport const meta: MetaFunction = (data) => {\n  const home = data.parentsData.root.home as HomeDocument;\n\n  return {\n    title: ['Browse AI Tool Categories', home.siteTitle]\n      .filter(Boolean)\n      .join(' | '),\n    description:\n      'Browse the different types of AI tools listed by category type.',\n  };\n};\n\nexport const loader = async (props: LoaderArgs) => {\n  const guideQuery = groq`*[_type == \"guide\" ]{\n         _id,\n        title,\n        // GROQ can re-shape data in the request!\n        \"slug\": slug.current,\n     \n        // for simplicity in this demo these are typed as \"any\"\n        // we can make them type-safe with a little more work\n        // https://www.simeongriggs.dev/type-safe-groq-queries-for-sanity-data-with-zod\n        image,\n        content,\n        metatitle,\n        metadescription,\n        metaimage,\n        overview,\n     \n   tags[]{\n        _key,\n        \"title\": @->title,\n        \"slug\": @->slug.current\n      }\n    }`;\n\n  const guides = await getClient()\n    .fetch(guideQuery)\n    .then((res) => (res ? guidesZ.parse(res) : null));\n\n  if (!guides) {\n    throw new Response('Not found', { status: 404 });\n  }\n\n  return json({ guides });\n};\n\nexport default function Index() {\n  const { guides } = useLoaderData<typeof loader>();\n\n  return (\n    <Layout>\n      <div className='grid grid-cols-1 gap-6 md:gap-12'>\n        <header className='space-y-4'>\n          <Title>All howtu.ai Guides</Title>\n        </header>\n        {guides.length > 0 ? (\n          <section className='grid md:grid-cols-3'>\n            {guides.map((guide) => (\n              <Link\n                to={'/guides/' + guide.slug}\n                key={guide.title}\n                className='group grid items-center gap-4 border p-2 transition-all duration-300 hover:-translate-y-2 hover:border-dashed md:grid-cols-2 '\n              >\n                <div className=''>\n                  {guide.image ? (\n                    <img\n                      className='h-auto w-full  object-cover shadow-black transition-all duration-300  group-hover:scale-105 '\n                      src={urlBuilder(projectDetails())\n                        .image(guide.image.asset._ref)\n                        .height(300)\n                        .width(400)\n                        .fit('max')\n                        .auto('format')\n                        .url()}\n                      alt={String(guide.title) ?? ``}\n                      loading='lazy'\n                    />\n                  ) : (\n                    <div className='flex aspect-square w-full items-center justify-center bg-gray-100 text-gray-500'>\n                      {guide.title ?? `Missing thumbnail`}\n                    </div>\n                  )}\n                </div>\n                <div>\n                  {' '}\n                  <h2 className='text-2xl'> {guide.title}</h2>\n                  <span className='opacity-50  group-hover:underline group-hover:opacity-100'>\n                    Read the guide\n                  </span>\n                </div>\n              </Link>\n            ))}\n          </section>\n        ) : (\n          <p> No products found </p>\n        )}\n      </div>\n    </Layout>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,kBAAiB;AAIjB,uBAAuB;AAoEb;AA1DH,IAAM,QAAuB,MAAM;AACxC,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM,iBAAW,CAAC;AACjD;AAEO,IAAM,OAAqB,CAAC,SAAS;AAC1C,QAAM,OAAO,KAAK,YAAY,KAAK;AAEnC,SAAO;AAAA,IACL,OAAO,CAAC,6BAA6B,KAAK,SAAS,EAChD,OAAO,OAAO,EACd,KAAK,KAAK;AAAA,IACb,aACE;AAAA,EACJ;AACF;AAqCe,SAAR,QAAyB;AAC9B,QAAM,EAAE,OAAO,IAAI,cAA6B;AAEhD,SACE,mDAAC,UACC,6DAAC,SAAI,WAAU,oCACb;AAAA,uDAAC,YAAO,WAAU,aAChB,6DAAC,SAAM,mCAAP;AAAA;AAAA;AAAA;AAAA,WAA0B,KAD5B;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACC,OAAO,SAAS,IACf,mDAAC,aAAQ,WAAU,uBAChB,iBAAO,IAAI,CAAC,UAAO;AAhFhC;AAiFc;AAAA,QAAC;AAAA;AAAA,UACC,IAAI,aAAa,MAAM;AAAA,UAEvB,WAAU;AAAA,UAEV;AAAA,+DAAC,SAAI,WAAU,IACZ,gBAAM,QACL;AAAA,cAAC;AAAA;AAAA,gBACC,WAAU;AAAA,gBACV,SAAK,iBAAAA,SAAW,eAAe,CAAC,EAC7B,MAAM,MAAM,MAAM,MAAM,IAAI,EAC5B,OAAO,GAAG,EACV,MAAM,GAAG,EACT,IAAI,KAAK,EACT,KAAK,QAAQ,EACb,IAAI;AAAA,gBACP,MAAK,YAAO,MAAM,KAAK,MAAlB,YAAuB;AAAA,gBAC5B,SAAQ;AAAA;AAAA,cAVV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAWA,IAEA,mDAAC,SAAI,WAAU,mFACZ,sBAAM,UAAN,YAAe,uBADlB;AAAA;AAAA;AAAA;AAAA,mBAEA,KAjBJ;AAAA;AAAA;AAAA;AAAA,mBAmBA;AAAA,YACA,mDAAC,SACE;AAAA;AAAA,cACD,mDAAC,QAAG,WAAU,YAAW;AAAA;AAAA,gBAAE,MAAM;AAAA,mBAAjC;AAAA;AAAA;AAAA;AAAA,qBAAuC;AAAA,cACvC,mDAAC,UAAK,WAAU,6DAA4D,8BAA5E;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,iBALF;AAAA;AAAA;AAAA;AAAA,mBAMA;AAAA;AAAA;AAAA,QA7BK,MAAM;AAAA,QAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgCA;AAAA,KACD,KAnCH;AAAA;AAAA;AAAA;AAAA,WAoCA,IAEA,mDAAC,OAAE,mCAAH;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,OA3C1B;AAAA;AAAA;AAAA;AAAA,SA6CA,KA9CF;AAAA;AAAA;AAAA;AAAA,SA+CA;AAEJ;",
  "names": ["urlBuilder"]
}
