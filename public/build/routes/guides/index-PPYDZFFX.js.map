{
  "version": 3,
  "sources": ["../../../../app/routes/guides/index.tsx"],
  "sourcesContent": ["/* eslint-disable prettier/prettier */\nimport type { LinksFunction, LoaderArgs, MetaFunction } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { Link, useLoaderData } from '@remix-run/react';\nimport groq from 'groq';\nimport { guidesZ } from '~/types/content';\nimport AlbumCover from '~/components/RecordCover';\n\nimport Layout from '~/components/Layout';\nimport Title from '~/components/Title';\nimport { getClient } from '~/sanity/client';\nimport stylesheet from '~/tailwind.css';\nimport type { HomeDocument } from '~/types/home';\n\nexport const links: LinksFunction = () => {\n  return [{ rel: 'stylesheet', href: stylesheet }];\n};\n\nexport const meta: MetaFunction = (data) => {\n  const home = data.parentsData.root.home as HomeDocument;\n\n  return {\n    title: ['Browse AI Tool Categories', home.siteTitle]\n      .filter(Boolean)\n      .join(' | '),\n    description:\n      'Browse the different types of AI tools listed by category type.',\n  };\n};\n\nexport const loader = async (props: LoaderArgs) => {\n  const guideQuery = groq`*[_type == \"guide\" ]{\n         _id,\n        title,\n        // GROQ can re-shape data in the request!\n        \"slug\": slug.current,\n     \n        // for simplicity in this demo these are typed as \"any\"\n        // we can make them type-safe with a little more work\n        // https://www.simeongriggs.dev/type-safe-groq-queries-for-sanity-data-with-zod\n        image,\n        content,\n        metatitle,\n        metadescription,\n        metaimage,\n        overview,\n     \n   tags[]{\n        _key,\n        \"title\": @->title,\n        \"slug\": @->slug.current\n      }\n    }`;\n\n  const guides = await getClient()\n    .fetch(guideQuery)\n    .then((res) => (res ? guidesZ.parse(res) : null));\n\n  if (!guides) {\n    throw new Response('Not found', { status: 404 });\n  }\n\n  return json({ guides });\n};\n\nexport default function Index() {\n  const { guides } = useLoaderData<typeof loader>();\n\n  return (\n    <Layout>\n      <div className='grid grid-cols-1 gap-6 md:gap-12'>\n        <header className='space-y-4'>\n          <Title>All How.ai Guides</Title>\n        </header>\n        {guides.length > 0 ? (\n          <section className='grid grid-cols-3'>\n            {guides.map((guide) => (\n              <Link to={'/guides/' + guide.slug} key={guide.title}>\n                <div className=''>\n                  <AlbumCover image={guide.image} title={guide.title} />\n                </div>\n                {guide.title}\n              </Link>\n            ))}\n          </section>\n        ) : (\n          <p> No products found </p>\n        )}\n      </div>\n    </Layout>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,kBAAiB;AAoEP;AA1DH,IAAM,QAAuB,MAAM;AACxC,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM,iBAAW,CAAC;AACjD;AAEO,IAAM,OAAqB,CAAC,SAAS;AAC1C,QAAM,OAAO,KAAK,YAAY,KAAK;AAEnC,SAAO;AAAA,IACL,OAAO,CAAC,6BAA6B,KAAK,SAAS,EAChD,OAAO,OAAO,EACd,KAAK,KAAK;AAAA,IACb,aACE;AAAA,EACJ;AACF;AAqCe,SAAR,QAAyB;AAC9B,QAAM,EAAE,OAAO,IAAI,cAA6B;AAEhD,SACE,mDAAC,UACC,6DAAC,SAAI,WAAU,oCACb;AAAA,uDAAC,YAAO,WAAU,aAChB,6DAAC,SAAM,iCAAP;AAAA;AAAA;AAAA;AAAA,WAAwB,KAD1B;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACC,OAAO,SAAS,IACf,mDAAC,aAAQ,WAAU,oBAChB,iBAAO,IAAI,CAAC,UACX,mDAAC,QAAK,IAAI,aAAa,MAAM,MAC3B;AAAA,yDAAC,SAAI,WAAU,IACb,6DAAC,eAAW,OAAO,MAAM,OAAO,OAAO,MAAM,SAA7C;AAAA;AAAA;AAAA;AAAA,aAAoD,KADtD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACC,MAAM;AAAA,SAJ+B,MAAM,OAA9C;AAAA;AAAA;AAAA;AAAA,WAKA,CACD,KARH;AAAA;AAAA;AAAA;AAAA,WASA,IAEA,mDAAC,OAAE,mCAAH;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,OAhB1B;AAAA;AAAA;AAAA;AAAA,SAkBA,KAnBF;AAAA;AAAA;AAAA;AAAA,SAoBA;AAEJ;",
  "names": []
}
